import pytest
from fastapi.testclient import TestClient
from unittest.mock import patch
from app.main import app

client = TestClient(app)

#MFA Settings Endpoint Test
@pytest.mark.asyncio
async def test_get_mfa_settings():
    with patch('app.services.graph_service.GraphService.get_mfa_settings') as mock_mfa:
        mock_mfa.return_value = {
            "enabled": True,
            "enforced": True,
            "excluded_users": [],
            "methods_allowed": ["phoneApp", "sms"]
        }
        response = client.get("/api/v1/compliance/security/mfa-settings")
        assert response.status_code == 200
        data = response.json()
        assert data["enabled"] is True
        assert data["enforced"] is True

#Conditional Access Policies Endpoint Test
@pytest.mark.asyncio
async def test_get_conditional_access():
    with patch('app.services.graph_service.GraphService.get_conditional_access_policies') as mock_policies:
        mock_policies.return_value = [
            {
                "id": "policy1",
                "display_name": "Test Policy",
                "state": "enabled",
                "conditions": {},
                "grant_controls": {},
                "created_datetime": "2023-01-01T00:00:00Z",
                "modified_datetime": "2023-01-02T00:00:00Z"
            }
        ]
        response = client.get("/api/v1/compliance/security/conditional-access")
        assert response.status_code == 200
        data = response.json()
        assert len(data) == 1
        assert data[0]["display_name"] == "Test Policy"     

#External Sharing Settings Endpoint Test
@pytest.mark.asyncio
async def test_get_external_sharing():
    with patch('app.services.graph_service.GraphService.get_external_sharing_settings') as mock_sharing:
        mock_sharing.return_value = {
            "sharing_capability": "externalUserSharingOnly",
            "anonymous_link_enabled": True,
            "require_external_sharing_expiration": False,
            "expiration_days": 30,
            "domains_allowed": ["example.com"]
        }
        response = client.get("/api/v1/compliance/security/external-sharing")
        assert response.status_code == 200
        data = response.json()
        assert data["sharing_capability"] == "externalUserSharingOnly"
        assert data["anonymous_link_enabled"] is True

#Admin Role Assignments Endpoint Test
@pytest.mark.asyncio
async def test_get_admin_roles():
    with patch('app.services.graph_service.GraphService.get_admin_role_assignments') as mock_roles:
        mock_roles.return_value = [
            {
                "role_id": "role1",
                "role_name": "Global Administrator",
                "principal_id": "user1",
                "principal_display_name": "Admin User",
                "assigned_datetime": "2023-01-01T00:00:00Z"
            }
        ]
        response = client.get("/api/v1/compliance/security/admin-roles")
        assert response.status_code == 200
        data = response.json()
        assert len(data) == 1
        assert data[0]["role_name"] == "Global Administrator"

